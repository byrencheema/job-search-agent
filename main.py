#!/usr/bin/env python3
"""
Job Search AI Agent System - Main Entry Point

This is the main script that runs the multi-agent job search system.
Students can run this file directly to get a comprehensive job search report.

Usage:
    python main.py

Or customize the search parameters at the top of this file!

Author: Claude Builder Club @ UC Irvine
Workshop: Intro to AI Agents (October 20, 2025)
"""

import sys
from datetime import datetime
from pathlib import Path

from crewai import Crew, Process

# Import our custom modules
from src.config import (
    DEFAULT_JOB_ROLE,
    DEFAULT_LOCATION,
    DEFAULT_NUM_RESULTS,
    OUTPUT_DIR,
    validate_config,
    print_config,
    CREW_PROCESS,
)
from src.agents import create_all_agents
from src.tasks import create_all_tasks


# =============================================================================
# JOB SEARCH PARAMETERS - CUSTOMIZE THESE!
# =============================================================================

# TODO: CUSTOMIZE - Change these values for your own job search!
# These default to the values in config.py, but you can override them here
JOB_ROLE = DEFAULT_JOB_ROLE  # e.g., "Software Engineer", "Product Manager"
LOCATION = DEFAULT_LOCATION  # e.g., "San Francisco", "Remote", "New York"
NUM_RESULTS = DEFAULT_NUM_RESULTS  # Number of jobs to search for (1-50)

# Example customizations:
# JOB_ROLE = "Machine Learning Engineer"
# LOCATION = "San Francisco"
# NUM_RESULTS = 10


# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def print_banner():
    """Print a welcoming banner."""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                          ‚ïë
‚ïë            ü§ñ JOB SEARCH AI AGENT SYSTEM ü§ñ                             ‚ïë
‚ïë                                                                          ‚ïë
‚ïë         Multi-Agent Job Search Powered by CrewAI + Claude               ‚ïë
‚ïë                                                                          ‚ïë
‚ïë              UC Irvine Claude Builder Club                               ‚ïë
‚ïë              Intro to AI Agents Workshop                                 ‚ïë
‚ïë              October 20, 2025                                            ‚ïë
‚ïë                                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)


def print_search_params(role: str, location: str, num_results: int):
    """Print the search parameters being used."""
    print("\n" + "="*80)
    print("üéØ SEARCH PARAMETERS")
    print("="*80)
    print(f"  Job Role:        {role}")
    print(f"  Location:        {location}")
    print(f"  # of Results:    {num_results}")
    print("="*80 + "\n")


def save_final_report(crew_output, role: str, location: str) -> Path:
    """
    Save the final combined report from all agents.

    Args:
        crew_output: The output from crew.kickoff()
        role: Job role searched
        location: Location searched

    Returns:
        Path to the saved report file
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"job_search_report_{timestamp}.txt"
    filepath = OUTPUT_DIR / filename

    with open(filepath, "w", encoding="utf-8") as f:
        # Write header
        f.write("="*80 + "\n")
        f.write("JOB SEARCH AI AGENT SYSTEM - FINAL REPORT\n")
        f.write("="*80 + "\n\n")

        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Job Role: {role}\n")
        f.write(f"Location: {location}\n\n")

        f.write("="*80 + "\n")
        f.write("EXECUTIVE SUMMARY\n")
        f.write("="*80 + "\n\n")

        f.write(
            "This report was generated by a multi-agent AI system using CrewAI\n"
            "and Claude. Four specialized agents collaborated to provide you with:\n\n"
            "  1. üîç Job Search Results - Current openings matching your criteria\n"
            "  2. üìö Skills Development Roadmap - What to learn and how\n"
            "  3. üé§ Interview Preparation - Questions and strategies\n"
            "  4. üíº Career Strategy - Resume, LinkedIn, and application advice\n\n"
        )

        f.write("="*80 + "\n")
        f.write("FULL REPORT\n")
        f.write("="*80 + "\n\n")

        # Write the crew output
        f.write(str(crew_output))

        f.write("\n\n" + "="*80 + "\n")
        f.write("END OF REPORT\n")
        f.write("="*80 + "\n")

    return filepath


def print_completion_message(report_path: Path):
    """Print completion message with report location."""
    print("\n\n" + "="*80)
    print("‚úÖ JOB SEARCH ANALYSIS COMPLETE!")
    print("="*80)
    print(f"\nüìÑ Full report saved to: {report_path}")
    print(f"\nüìÇ All intermediate outputs saved in: {OUTPUT_DIR}")
    print("\n" + "="*80)
    print("\nüéâ Next Steps:")
    print("  1. Review the full report for comprehensive job search guidance")
    print("  2. Check individual agent outputs in the outputs/ folder")
    print("  3. Customize the search parameters in main.py to find more jobs")
    print("  4. Use the insights to update your resume and LinkedIn profile")
    print("  5. Start applying with confidence! üöÄ")
    print("\n" + "="*80 + "\n")


# =============================================================================
# MAIN FUNCTION
# =============================================================================

def main():
    """
    Main function that orchestrates the entire job search process.

    Process:
    1. Validate configuration
    2. Create agents
    3. Create tasks
    4. Create and run crew
    5. Save and display results
    """

    # -------------------------------------------------------------------------
    # Step 1: Print banner and configuration
    # -------------------------------------------------------------------------

    print_banner()
    print_config()

    # -------------------------------------------------------------------------
    # Step 2: Validate configuration
    # -------------------------------------------------------------------------

    print("üîç Validating configuration...")
    is_valid, errors = validate_config()

    if not is_valid:
        print("\n‚ùå Configuration Error!\n")
        print("Please fix the following issues:\n")
        for i, error in enumerate(errors, 1):
            print(f"  {i}. {error}")
        print("\nSee SETUP.md for detailed setup instructions.")
        sys.exit(1)

    print("‚úÖ Configuration valid!\n")

    # -------------------------------------------------------------------------
    # Step 3: Display search parameters
    # -------------------------------------------------------------------------

    print_search_params(JOB_ROLE, LOCATION, NUM_RESULTS)

    # -------------------------------------------------------------------------
    # Step 4: Create agents
    # -------------------------------------------------------------------------

    print("ü§ñ Creating AI agents...")
    print("  ‚Ä¢ Job Search Specialist")
    print("  ‚Ä¢ Skills Development Advisor")
    print("  ‚Ä¢ Interview Preparation Coach")
    print("  ‚Ä¢ Career Strategy Advisor")

    agents_dict = create_all_agents()
    print("‚úÖ All agents created!\n")

    # -------------------------------------------------------------------------
    # Step 5: Create tasks
    # -------------------------------------------------------------------------

    print("üìã Creating tasks...")
    tasks = create_all_tasks(
        agents=agents_dict,
        role=JOB_ROLE,
        location=LOCATION,
        num_results=NUM_RESULTS
    )
    print(f"‚úÖ Created {len(tasks)} tasks!\n")

    # -------------------------------------------------------------------------
    # Step 6: Create crew
    # -------------------------------------------------------------------------

    print("üë• Assembling crew...")

    crew = Crew(
        agents=list(agents_dict.values()),
        tasks=tasks,
        process=Process.sequential,  # Tasks run one after another
        verbose=True,  # Show detailed output (great for learning!)
    )

    print("‚úÖ Crew assembled!\n")

    # -------------------------------------------------------------------------
    # Step 7: Run the crew!
    # -------------------------------------------------------------------------

    print("="*80)
    print("üöÄ STARTING JOB SEARCH ANALYSIS")
    print("="*80)
    print("\nThis may take 3-5 minutes depending on API response times.")
    print("You'll see detailed output from each agent as they work.\n")
    print("="*80 + "\n")

    try:
        # This is where the magic happens!
        # The crew will execute all tasks in sequence, with each agent
        # doing their specialized work.
        crew_output = crew.kickoff()

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Job search interrupted by user.")
        print("Partial results may be available in the outputs/ folder.")
        sys.exit(0)

    except Exception as e:
        print(f"\n\n‚ùå Error during job search: {str(e)}")
        print("\nTroubleshooting tips:")
        print("  1. Check your API keys in .env")
        print("  2. Verify internet connection")
        print("  3. Review error details above")
        print("  4. See TROUBLESHOOTING.md for common issues")
        sys.exit(1)

    # -------------------------------------------------------------------------
    # Step 8: Save final report
    # -------------------------------------------------------------------------

    print("\nüíæ Saving final report...")
    report_path = save_final_report(crew_output, JOB_ROLE, LOCATION)
    print(f"‚úÖ Report saved to: {report_path.name}")

    # -------------------------------------------------------------------------
    # Step 9: Print completion message
    # -------------------------------------------------------------------------

    print_completion_message(report_path)


# =============================================================================
# ENTRY POINT
# =============================================================================

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {str(e)}")
        print("\nPlease report this issue with the error details above.")
        print("See TROUBLESHOOTING.md for help.")
        sys.exit(1)
